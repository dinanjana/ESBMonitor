{
  "name": "WSO2 ESB Flight Recorder",
  "tagline": "WSO2 ESB Flight Recorder is a tool that can be used to monitor an instance of WSO2 ESB.",
  "body": "## Introduction\r\n\r\nDuring past 3 months I was engaged in building java based application to monitoring tool for WSO2 Enterprise Service Bus. This application acts as a flight recorder to the esb. It monitors signs for undesirable changes within the JVM which hosts the esb. Basically it monitors below aspects of the ESB,\r\n\r\n* Memory usage of ESB\r\n* CPU load of ESB\r\n* Network traffic of ESB\r\n* Responsiveness of ESB\r\nAlso this tool save http/https request load on an embedded Apache Derby db periodically.\r\n\r\nUser can specify what are the undesirable changes for each fact by changing some values on wso2esbfr.properties file. Those values represent the point at which esb can goes to an undesirable state. Any undesirable change in above variable in ESB will result in triggering an \"Event\" in this monitoring application. Currently our application supports 4 such events. They are,\r\n\r\n* Out of memory event\r\n* High CPU load event\r\n* High network traffic event\r\n* Unresponsive esb event\r\n\r\nThese \"Events\" contain set of actions which must be performed during such event. Currently our application supports 3 such operations.\r\n\r\n* Thread dumps generation\r\n* Heap dumps generation\r\n* wso2carbon.log extraction \r\nConfiguration of these events can be done through changing the values of parameters of properties files that are there for each events. User can configure whether he/she requires any dump generated or if they are generated, how many of them should be generated during the event etc.\r\n\r\nWhen an event occurs our application will generate a report about that particular event stating the details required by the user. Then the application will create a zip archive containing all the required dumps bundled with this report which a user can easily send to get support to analyse the anomaly.\r\n\r\n##How it works?\r\n\r\n\r\n\r\nAbove figure roughly describes the flow inside the WSO2 ESB Flight Recorder\r\n\r\nAll necessary properties must be set in below property files inside the resources directory inside the directory which has esbMonitor-1.0-SNAPSHOT-jar-with-dependecies.jar file. Among these properties , properties related to trigger WSO2 ESB Flight Recorder also there. For more details on properties read the Read.me file on the repository.\r\n\r\nwso2esbfr.properties\r\nwso2esbfrOOMevent.properties\r\nwso2esbfrHighCPULoadEvent.properties\r\nwso2esbfrHighRequestCountEvent.properties\r\nAfter setting those properties run the jar file. It will pick up configuration details from those files and will keep them in the memory. During application loading it will start-up \"Monitors\". These monitors are correspond to monitor many aspects of  ESB instance such as memory usage and cpu load. When values of these properties in ESB instance hit critical levels, ESB Flight recorder will trigger necessary \"Events\". Set of actions must be done during these events are also set by user through property files. Theses \"Events\" will take actions according to those configuration. Example for such actions are generate heap dumps, generate thread dumps and generate report on this event.\r\n\r\nFinally we have successfully integrated Java Flight Record or simply known as JFR support to this project as well. \r\n\r\n\r\nThis open source project can be found at[1]\r\nCarbon admin service for ping esb and extract log can be found at[2]\r\nThe list of work done by me can be viewed at below links[3][4]\r\nhttps://github.com/dinanjana/ESBMonitor\r\nhttps://github.com/dinanjana/Carbon-component\r\nhttps://github.com/dinanjana/ESBMonitor/commits/master?author=dinanjana\r\nhttps://github.com/dinanjana/Carbon-component/commits/master?author=dinanjana\r\nWork to be completed\r\n\r\nWe couldn't finish the WSO2 Carbon Admin service to extract errors printed in the wso2carbo.log file. But hope to complete this minor task in coming weeks as well. However this was not in the original project plan. All the deliverable listed in the proposal are completed.\r\n\r\n\r\nFinally I would like to thank,\r\nGoogle for providing students this great opportunity to collaborate with FOSS communities\r\nWSO2 for giving me this opportunity to participate in Google Summer of Code Program. Participating in this program helped me learn a lot of new things and to improve my skills.\r\nMy project mentors, Isuru Udana and Chanaka Fernando for selecting me for this project, for the guidance and support extended throughout this period and for helping me to complete this project successfully.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}